import type { Metadata } from "next";
import localFont from "next/font/local";
import { NextIntlClientProvider } from "next-intl";
import { notFound } from "next/navigation";
import "../globals.css";

/* eslint-disable @typescript-eslint/no-explicit-any */

const geistSans = localFont({
  src: "../fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "../fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export interface SegmentParams {
  locale: Promise<string>;  
}

export interface PageProps {
  params?: Promise<SegmentParams>;
  searchParams?: Promise<unknown>;
}

export interface LayoutProps {
  children?: React.ReactNode;
  params?: Promise<SegmentParams>;  
}

export default async function LocaleLayout({ children, params }: LayoutProps) {
  const resolvedParams = params ? await params : { locale: Promise.resolve("en") }; 
  const locale = await resolvedParams?.locale || "en";  

  let messages;
  try {
    messages = (await import(`../../messages/${locale}.json`)).default;
  } catch {
    notFound();
  }

  return (
    <html lang={locale} className={`${geistSans.variable} ${geistMono.variable}`}>
      <body>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}